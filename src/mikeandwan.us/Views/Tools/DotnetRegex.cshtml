@using System.Text.RegularExpressions
@model MawMvcApp.ViewModels.Tools.Dotnet.RegexViewModel
@{
    Layout = "_LayoutSidebar";
    ViewBag.Title = "tools | .net regular expressions ";
}

@section header {
    <h1>.Net Regular Expressions</h1>
}

@section sidebar {
    @Html.Partial("_ToolSidebar", new SidebarModel() { Group = "dotnet", Item = "dotnet-regex" })
}

<p>
 This tool will demonstrate if the input string results in a match based
 on the supplied regex.  Please note that both the sample text and regex
 will be trimmed before being used by the page.
</p>

<form asp-controller="tools" asp-action="dotnetregex" method="post" autocomplete="off" role="form">
	<div class="form-group">
        <label asp-for="Pattern" class="col-form-label"></label>
        <textarea asp-for="Pattern" rows="2" class="form-control" autofocus=""></textarea>
        <span asp-validation-for="Pattern" class="form-text"></span>
    </div>

    <div class="form-group">
        <label asp-for="Input" class="col-form-label"></label>
        <textarea asp-for="Input" rows="4" class="form-control" autofocus=""></textarea>
        <span asp-validation-for="Input" class="form-text"></span>
	</div>

    <div class="row">
        <div class="col">
            <div class="form-group">
                <div class="form-check">
                    <label class="form-check-label">
                        <input type="checkbox" asp-for="OptionCultureInvariant" class="form-check-input" /> Culture Invariant
                    </label>
                </div>
                <div class="form-check">
                    <label class="form-check-label">
                        <input type="checkbox" asp-for="OptionEcmaScript" class="form-check-input" /> ECMA Script
                    </label>
                </div>
                <div class="form-check">
                    <label class="form-check-label">
                        <input type="checkbox" asp-for="OptionExplicitCapture" class="form-check-input" /> Explicit Capture
                    </label>
                </div>
            </div>
        </div>

        <div class="col">
            <div class="form-group">
                <div class="form-check">
                    <label class="form-check-label">
                        <input type="checkbox" asp-for="OptionIgnoreCase" class="form-check-input" /> Ignore Case
                    </label>
                </div>
                <div class="form-check">
                    <label class="form-check-label">
                        <input type="checkbox" asp-for="OptionIgnorePatternWhitespace" class="form-check-input" /> Ignore Pattern Whitespace
                    </label>
                </div>
                <div class="form-check">
                    <label class="form-check-label">
                        <input type="checkbox" asp-for="OptionMultiline" class="form-check-input" /> Multiline
                    </label>
                </div>
            </div>
        </div>

        <div class="col">
            <div class="form-group">
                <div class="form-check">
                    <label class="form-check-label">
                        <input type="checkbox" asp-for="OptionNone" class="form-check-input" /> None
                    </label>
                </div>
                <div class="form-check">
                    <label class="form-check-label">
                        <input type="checkbox" asp-for="OptionRightToLeft" class="form-check-input" /> Right to Left
                    </label>
                </div>
                <div class="form-check">
                    <label class="form-check-label">
                        <input type="checkbox" asp-for="OptionSingleLine" class="form-check-input" /> Single Line
                    </label>
                </div>
            </div>
        </div>
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-primary">Submit</button>
    </div>
</form>

@if(Model.RegexMatches != null) {
	string results = null;

	switch(Model.RegexMatches.Count) 	{
		case 0:
			results = "No matches found.";
			break;
		case 1:
			results = "1 match found.";
			break;
		default:
			results = string.Concat(Model.RegexMatches.Count, " matches found.");
			break;
	}

	<strong>@results</strong>

	<ul>
	@foreach(Match match in Model.RegexMatches) {
		<li>Match: @match.Value
		@if(match.Groups != null && match.Groups.Count > 0) {
			int groupid = 0;

			<ul>
			@foreach(Group group in match.Groups) {
				string name = string.Concat("[", groupid, " : ", Model.Regex.GroupNameFromNumber(groupid), "]");

				<li>Group: @name : @group.Value
				@if(group.Captures != null && group.Captures.Count > 1) {
					int captureid = 0;
					<ul>
					@foreach(Capture capture in group.Captures) {
						<li>Capture: @capture.Value</li>
						captureid++;
					}
					</ul>
				}
				</li>

				groupid++;
			}
			</ul>
		}
		</li>
	}
	</ul>
}