@{
    Layout = "_LayoutSidebar";
    ViewBag.Title = "reference | .net guidelines | fundamentals";
}

@section header {
    <h1>.Net Framework Design Guidelines</h1>
}

@section sidebar {
    @{
        var sidebarModel = new SidebarModel() { Group = "dotnet", Item = "dotnet-guidelines-fundamentals" };
    }
    <partial name="_ReferenceSidebar" model="sidebarModel" />
}

<p>The following items are called out as points to remember in this excellent book by Krzysztof Cwalina and Brad Abrams.</p>

<h2>Fundamentals</h2>

<table class="table table-responsive table-striped table-hover table-sm">
      <tbody>
        <tr><td>Do</td><td>Design frameworks that are both powerful and easy to use.</td></tr>
        <tr><td>Do</td><td>Explicitly design for a broad range of developers with different programming styles, requirements, skill levels, and using different programming languages.</td></tr>
        <tr><td>Do</td><td>Understand the broad range of developers using multi language frameworks.</td></tr>
        <tr><td>Do</td><td>Make sure that the API design specification is the central part of the design of any feature that includes a publicly accessible API.</td></tr>
        <tr><td>Do</td><td>Define top usage scenarios for each major feature area.</td></tr>
        <tr><td>Do</td><td>Ensure that the scenarios correspond to an appropriate abstraction level.</td></tr>
        <tr><td>Do</td><td>Design APIs by first writing code samples for the main scenarios and then defining the object model to support the code samples.</td></tr>
        <tr><td>Do</td><td>Write main scenario code samples in at least two different language families (i.e. VB.Net and C++)</td></tr>
        <tr><td>Do Not</td><td>Rely solely on standard design methodologies when designing the public APIs layer of a framework.</td></tr>
        <tr><td>Do</td><td>Organize usability studies to test APIs in main scenarios.</td></tr>
        <tr><td>Do</td><td>Ensure that each main feature area namespace contains only types that are used in the most common scenarios.</td></tr>
        <tr><td>Do</td><td>Provide simple overloads of constructors and methods.</td></tr>
        <tr><td>Do Not</td><td>Have members intended for advanced scenarios on types intended for mainline scenarios.</td></tr>
        <tr><td>Do Not</td><td>Require users to explicitly instantiate more than one type in the most basic scenarios.</td></tr>
        <tr><td>Do Not</td><td>Require that users perform any extensive initialization before they can start programming basic scenarios.</td></tr>
        <tr><td>Do</td><td>Provide good defaults for all properties and parameters (using convenience overloads) if possible.</td></tr>
        <tr><td>Do</td><td>Communicate incorrect usage of APIs using exceptions.</td></tr>
        <tr><td>Do</td><td>Ensure the APIs are intuitive and can be successfully used in basic scenarios without referring to the reference documentation.</td></tr>
        <tr><td>Do</td><td>Provide great documentation with all APIs.</td></tr>
        <tr><td>Do</td><td>Make the discussion about identifier naming choices a significant part of specification reviews.</td></tr>
        <tr><td>Do Not</td><td>Be afraid to use verbose identifier names.</td></tr>
        <tr><td>Do</td><td>Involve user education experts early in the design process.</td></tr>
        <tr><td>Consider</td><td>Reserving the best type names for the most commonly used types.</td></tr>
        <tr><td>Do</td><td>Use exception messages to communicate framework usage mistakes to the developer.</td></tr>
        <tr><td>Do</td><td>Provide strongly typed APIs if at all possible.</td></tr>
        <tr><td>Do</td><td>Ensure consistency with the .Net Framework and other frameworks your customers are likely to use.</td></tr>
        <tr><td>Avoid</td><td>Many abstractions in mainline scenario APIs.</td></tr>
        <tr><td>Consider</td><td>A layered framework with high-level APIs optimized for productivity and low-level APIs optimized for power and expressiveness</td></tr>
        <tr><td>Avoid</td><td>Mixing low-level and high-level APIs in a single namespace if the low-level APIs are very complex (i.e., they contain many types).</td></tr>
        <tr><td>Do</td><td>Ensure that layers of a single feature area are well integrated.</td></tr>
    </tbody>
</table>
